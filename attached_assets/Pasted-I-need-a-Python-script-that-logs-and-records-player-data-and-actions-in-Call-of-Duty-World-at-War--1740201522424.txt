I need a Python script that logs and records player data and actions in Call of Duty: World at War. The bot should capture the following information during gameplay:

   Game State Data:
   
   Player position (X, Y, Z coordinates)
   Camera angle (pitch, yaw, roll)
   Health and armor
   Ammo count (current weapon)
   Active weapon and loadout
   Enemy positions (if visible)
   Cover detection (is the player behind an object?)
   Game time elapsed
   Objective progress
   Player Actions:
   
   Movement inputs (WASD, crouch, jump, sprint)
   Aiming (mouse movement & crosshair position)
   Shooting (fire, burst, recoil control)
   Weapon switching and reloading
   Tactical decisions (peeking, rotating, flanking)
   Interaction with objects (doors, vehicles, etc.)
   Time spent in different behaviors (aggressive, defensive, etc.)
   Outcome of Actions:
   
   Hit or Miss (did the shot land?)
   Kill or Damage Done
   Death event logging
   Score gained
   Killstreaks or bonuses triggered
   Requirements:
   The script should log all events in real-time and store them in a structured format (CSV or JSON).
   If possible, it should use game console commands, API, or mod tools to pull data directly from the game.
   If direct data access isn't possible, implement keylogging and mouse tracking as a fallback.
   The bot should be optimized for performance, avoiding excessive resource consumption.
   The final output should be stored in game_logs.json or game_logs.csv.
   Implementation Approach:
   Use Python for logging.
   Implement pynput for tracking keypresses and mouse movement.
   Use file operations (JSON or CSV) to store logs.
   Provide a way to sync data with video recordings for better analysis.
   Ensure the script is modular and extendable for future AI training.
   Generate a complete, well-commented Python script that can run independently and log all requested data.
   The game logger is now running successfully in limited mode. It will continue to collect game state data (player position, health, etc.) even without input tracking. To enable full functionality including keyboard and mouse tracking, the application needs to be run with root privileges.

Would you like to:

Continue using it in limited mode (game state only)
Get instructions for running it with root privileges for full functionality
Make any other modifications to the current implementation?
I'll help you prepare the code for running with root privileges and push it to your GitHub organization. Let's make sure everything is properly documented and tested.

23 minutes ago
Before proceeding with the implementation, I need some important details:

For GitHub organization setup:

What's the organization name?
Any specific repository name preference?
Any particular branch structure requirements?
For root access implementation:

Which operating system are you using? (Different approaches for Windows/Linux)
Do you want to implement automated privilege elevation or manual sudo execution?
For CoD integration:

Are you planning to test with the Steam version?
Do you need specific memory addresses for game state tracking?
Any particular game events you want to prioritize tracking?
Please provide these details so we can proceed with the most appropriate implementation.
ChanNEthanOS = github organization
COD Logger = repo name
main branch
OS is Windows 10
manual sudo for now
we are using the steam version
Heres a list of game events we need to track:

Game State Data:

Player position (X, Y, Z coordinates)
Camera angle (pitch, yaw, roll)
Health and armor
Ammo count (current weapon)
Active weapon and loadout
Enemy positions (if visible)
Cover detection (is the player behind an object?)
Game time elapsed
Objective progress
Player Actions:

Movement inputs (WASD, crouch, jump, sprint)
Aiming (mouse movement & crosshair position)
Shooting (fire, burst, recoil control)
Weapon switching and reloading
Tactical decisions (peeking, rotating, flanking)
Interaction with objects (doors, vehicles, etc.)
Time spent in different behaviors (aggressive, defensive, etc.)
Outcome of Actions:

Hit or Miss (did the shot land?)
Kill or Damage Done
Death event logging
Score gained
Killstreaks or bonuses triggered